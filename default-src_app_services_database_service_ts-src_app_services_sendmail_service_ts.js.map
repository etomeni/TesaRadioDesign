{"version":3,"file":"default-src_app_services_database_service_ts-src_app_services_sendmail_service_ts.js","mappings":"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","sources":["./node_modules/@emailjs/browser/es/api/sendPost.js","./node_modules/@emailjs/browser/es/index.js","./node_modules/@emailjs/browser/es/methods/init/init.js","./node_modules/@emailjs/browser/es/methods/send/send.js","./node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","./node_modules/@emailjs/browser/es/store/store.js","./node_modules/@emailjs/browser/es/utils/validateParams.js","./src/app/services/database.service.ts","./src/app/services/sendmail.service.ts"],"sourcesContent":["import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (userID, origin = 'https://api.emailjs.com') => {\n    store._userID = userID;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.4.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.4.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","import { Injectable } from '@angular/core';\nimport { AngularFireDatabase } from '@angular/fire/compat/database';\n\n// import { Firestore, collection, collectionData, doc, docData, addDoc, deleteDoc, updateDoc, getDocs } from '@angular/fire/firestore';\n// import { Observable } from 'rxjs';\n \nexport interface Note {\n  id?: string;\n  title: string;\n  text: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseService {\n\n  constructor(\n    private realtimeDB: AngularFireDatabase,\n    // private firestore: Firestore,\n  ) { }\n\n\n  // getMultipleDBdata(path: string): Observable<Note[]> {\n  //   const notesRef = collection(this.firestore, path);\n  //   return collectionData(notesRef) as Observable<Note[]>;\n  // }\n\n  // getDBdataById(path: string, id): Observable<Note> {\n  //   const noteDocRef = doc(this.firestore, `notes/${id}`);\n  //   return docData(noteDocRef, { idField: 'id' }) as Observable<Note>;\n  // }\n\n  // async getFirestore(path: string) {\n  //   try {\n  //     const querySnapshot = await getDocs(collection(this.firestore, path));\n  //     querySnapshot.forEach((doc) => {\n  //       console.log(`${doc.id} => ${doc.data()}`);\n  //     });\n  //   } catch (error) {\n  //     return error;\n  //     console.error(\"Error adding document: \", error);\n  //   }\n    \n  // }\n \n  // addToDB(path: string, data: any) {\n  //   try {\n  //     const collectionRef = collection(this.firestore, path);\n  //     const docRef: any = addDoc(collectionRef, data);\n  //     return docRef;\n  //     console.log(\"Document written with ID: \", docRef.id);\n  //   } catch (error) {\n  //     return error;\n  //     console.error(\"Error adding document: \", error);\n  //   }\n  // }\n \n  // deleteDb(path: string) {\n  //   try {\n  //     const docRef = doc(this.firestore, path);\n  //     return deleteDoc(docRef);\n  //     // await deleteDoc(doc(this.firestore, \"cities\", \"DC\"));\n  //   } catch (error) {\n  //     return error;\n  //     console.error(\"Error updating document: \", error);\n  //   }\n  // }\n \n  // updateDB(path: string, dataObj: any) {\n  //   try {\n  //     const noteDocRef = doc(this.firestore, path);\n  //     const updateDb = updateDoc(noteDocRef, dataObj);\n  //     return updateDb;\n  //   } catch (error) {\n  //     return error;\n  //     console.error(\"Error updating document: \", error);\n  //   }\n  // }\n\n\n  // THE FOLLOWING IS FOR THE COMPACTIBLE REALTIME DATABASE\n  \n  getRealtimeDBdata(path:any) {\n    let dbPath = this.realtimeDB.database.ref(path);\n    return new Promise<any> ((resolve, reject) => {\n      this.realtimeDB.object(dbPath).valueChanges().subscribe (\n        res=>resolve(res),\n        error=>reject(error)\n      )\n    })\n  }\n\n  saveToRealtimeDataDB(path: string, objData: object) {\n    // save in firebase real time database\n    // this.realtimeDB.object(path).set(objData).then( () => {\n    //   return \"true\";\n    // }).catch( ()=> {\n    //   return false;\n    // });\n\n    return new Promise<any> ( (resolve, reject) => {\n      this.realtimeDB.object(path).set(objData).then (\n        res=>resolve(true),\n        error=>reject(false)\n      )\n    })\n\n  }\n\n  updateRealtimeDBdata(path: string, objData: object) {\n\n    return new Promise<any> ( (resolve, reject) => {\n      this.realtimeDB.object(path).update(objData).then (\n        res=>resolve(true),\n        error=>reject(false)\n      )\n    })\n\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport emailjs, { init, EmailJSResponseStatus } from '@emailjs/browser';\ninit(\"user_e5j0ADby5pqaU68JoC3Bs\");\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SendmailService {\n  User_ID: string = \"user_e5j0ADby5pqaU68JoC3Bs\";\n  Access_Token: string = \"583053cc99a5479647dcef2d0668e15c\";\n  Service_ID: string = \"service_xq301p2\";\n  generalTemplate_ID: string = \"template_cx9rbe9\";\n\n  constructor() { }\n\n  shoutout(param: any = {\n    page: '',\n    from_name: '',\n    reply_to: '',\n    from_phone_number: '',\n    cat_resip_title: '',\n    cat_resip: '',\n    msg_descip_title: '',\n    msg_descip: '',\n    to_name: 'Team Tesa',\n  }) {\n    const Template_ID: string = \"template_d5b9za8\";\n\n    return new Promise<any> ((resolve, reject) => {\n      emailjs.send(this.Service_ID, Template_ID, param, this.User_ID)\n      .then(function(response) {\n        console.log('SUCCESS!', response.status, response.text);\n        let res: any = {\n          status: true,\n          res: response\n        }\n        // return res;\n        return resolve(res);\n      }, function(error) {\n        console.log('FAILED...', error);\n        let res: any = {\n          status: false,\n          res: error\n        }\n        // return res;\n        return reject(res);\n      });\n\n    });\n    \n  }\n\n  demandShows(param: any = {\n    page: '',\n    from_name: '',\n    reply_to: '',\n    from_phone_number: '',\n    cat_resip_title: '',\n    cat_resip: '',\n    msg_descip_title: '',\n    msg_descip: '',\n    to_name: 'Team Tesa',\n  }) {\n    const Template_ID: string = \"template_d5b9za8\";\n\n    return new Promise<any> ((resolve, reject) => {\n      emailjs.send(this.Service_ID, Template_ID, param, this.User_ID)\n      .then(function(response) {\n        console.log('SUCCESS!', response.status, response.text);\n        let res: any = {\n          status: true,\n          res: response\n        }\n        // return res;\n        return resolve(res);\n      }, function(error) {\n        console.log('FAILED...', error);\n        let res: any = {\n          status: false,\n          res: error\n        }\n        // return res;\n        return reject(res);\n      });\n\n    });\n    \n  }\n\n  contactUs(param: any = {\n    subject: '',\n    from_name: '',\n    reply_to: '',\n    from_phone_number: '',\n    before_msg: '',\n    message: '',\n    after_msg: '',\n    to_name: 'Team Tesa'\n  }) {\n\n    return new Promise<any> ((resolve, reject) => {\n      emailjs.send(this.Service_ID, this.generalTemplate_ID, param, this.User_ID)\n      .then(function(response) {\n        console.log('SUCCESS!', response.status, response.text);\n        let res: any = {\n          status: true,\n          res: response\n        }\n        // return res;\n        return resolve(res);\n      }, function(error) {\n        console.log('FAILED...', error);\n        let res: any = {\n          status: false,\n          res: error\n        }\n        // return res;\n        return reject(res);\n      });\n\n    });\n    \n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///"}